version: "3.8"

services:
  db:
    image: postgres:14.10-alpine3.18
    container_name: postgres
    volumes:
      - ./scraper/pg-setup:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: recruitment
      TZ: "Asia/Ho_Chi_Minh"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5
    restart: always
    ports:
      - "5432:5432"

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - TZ=Asia/Ho_Chi_Minh
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  app:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    container_name: scrap-vnworks-app
    volumes:
      - ./scraper:/app
    environment:
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure

  springapp:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: springboot-app
    ports:
      - "8080:8080"
    environment:
      - TZ=Asia/Ho_Chi_Minh
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/recruitment
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: on-failure
